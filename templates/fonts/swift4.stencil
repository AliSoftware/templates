// Generated using SwiftGen, by O.Halligon â€” https://github.com/SwiftGen/SwiftGen

{% if families %}
#if os(OSX)
  import AppKit.NSFont
  {% if param.accessModifier %}{{param.accessModifier}} {% endif %}typealias Font = NSFont
#elseif os(iOS) || os(tvOS) || os(watchOS)
  import UIKit.UIFont
  {% if param.accessModifier %}{{param.accessModifier}} {% endif %}typealias Font = UIFont
#endif

// swiftlint:disable file_length

{% if param.accessModifier %}{{param.accessModifier}} {% endif %}struct FontConvertible {
  {% if param.accessModifier %}{{param.accessModifier}} {% endif %}let name: String
  {% if param.accessModifier %}{{param.accessModifier}} {% endif %}let family: String
  {% if param.accessModifier %}{{param.accessModifier}} {% endif %}let path: String

  {% if param.accessModifier %}{{param.accessModifier}} {% endif %}func font(size: CGFloat) -> Font! {
    return Font(font: self, size: size)
  }

  {% if param.accessModifier %}{{param.accessModifier}} {% endif %}func register() {
    guard let url = url else { return }
    var errorRef: Unmanaged<CFError>?
    CTFontManagerRegisterFontsForURL(url as CFURL, .process, &errorRef)
  }

  fileprivate var url: URL? {
    let bundle = Bundle(for: BundleToken.self)
    return bundle.url(forResource: path, withExtension: nil)
  }
}

{% if param.accessModifier %}{{param.accessModifier}} {% endif %}extension Font {
  {% if param.accessModifier %}{{param.accessModifier}} {% endif %}convenience init!(font: FontConvertible, size: CGFloat) {
    #if os(iOS) || os(tvOS) || os(watchOS)
    if !UIFont.fontNames(forFamilyName: font.family).contains(font.name) {
      font.register()
    }
    #elseif os(OSX)
    if let url = font.url, CTFontManagerGetScopeForURL(url as CFURL) == .none {
      font.register()
    }
    #endif

    self.init(name: font.name, size: size)
  }
}

// swiftlint:disable identifier_name line_length type_body_length
{% macro transformPath path %}{% filter removeNewlines %}
  {% if param.preservePath %}
    {{path}}
  {% else %}
    {{path|basename}}
  {% endif %}
{% endfilter %}{% endmacro %}
{% if param.accessModifier %}{{param.accessModifier}} {% endif %}enum {{param.enumName|default:"FontFamily"}} {
  {% for family in families %}
  {% if param.accessModifier %}{{param.accessModifier}} {% endif %}enum {{family.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
    {% for font in family.fonts %}
    {% if param.accessModifier %}{{param.accessModifier}} {% endif %}static let {{font.style|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}} = FontConvertible(name: "{{font.name}}", family: "{{family.name}}", path: "{% call transformPath font.path %}")
    {% endfor %}
  }
  {% endfor %}
}
// swiftlint:enable identifier_name line_length type_body_length

private final class BundleToken {}
{% else %}
// No fonts found
{% endif %}
