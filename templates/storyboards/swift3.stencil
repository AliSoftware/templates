// Generated using SwiftGen, by O.Halligon â€” https://github.com/SwiftGen/SwiftGen

{% if platform and storyboards %}
{% set isAppKit %}{% if platform == "macOS" %}true{% endif %}{% endset %}
{% set prefix %}{% if isAppKit %}NS{% else %}UI{% endif %}{% endset %}
{% set controller %}{% if isAppKit %}Controller{% else %}ViewController{% endif %}{% endset %}
// swiftlint:disable sorted_imports
import Foundation
import {% if isAppKit %}Cocoa{% else %}UIKit{% endif %}
{% for module in modules where module != env.PRODUCT_MODULE_NAME and module != param.module %}
import {{module}}
{% endfor %}

// swiftlint:disable file_length

{# This first part of the code is static, same every time whatever Storyboard you have #}
protocol StoryboardType {
  static var storyboardName: String { get }
}

extension StoryboardType {
  static var storyboard: {{prefix}}Storyboard {
    return {{prefix}}Storyboard(name: self.storyboardName, bundle: Bundle(for: BundleToken.self))
  }
}

struct SceneType<T: Any> {
  let storyboard: StoryboardType.Type
  let identifier: String

  func instantiate() -> T {
    guard let controller = storyboard.storyboard.instantiate{{controller}}(withIdentifier: identifier) as? T else {
      fatalError("{{controller}} '\(identifier)' is not of the expected class \(T.self).")
    }
    return controller
  }
}

struct InitialSceneType<T: Any> {
  let storyboard: StoryboardType.Type

  func instantiate() -> T {
    guard let controller = storyboard.storyboard.instantiateInitial{{controller}}() as? T else {
      fatalError("{{controller}} is not of the expected class \(T.self).")
    }
    return controller
  }
}

protocol SegueType: RawRepresentable { }

extension {% if isAppKit %}NSSeguePerforming{% else %}UIViewController{% endif %} {
  func perform<S: SegueType>(segue: S, sender: Any? = nil) where S.RawValue == String {
    performSegue{% if isAppKit %}?{% endif %}(withIdentifier: segue.rawValue, sender: sender)
  }
}

{# This is where the generation begins, this code depends on what you have in your Storyboards #}
// swiftlint:disable explicit_type_interface identifier_name line_length type_body_length type_name
{% set sceneEnumName %}{{param.sceneEnumName|default:"StoryboardScene"}}{% endset %}
{% macro className scene %}{% filter removeNewlines %}
  {% if scene.customClass %}
    {% if scene.customModule %}{{scene.customModule}}.{% endif %}
    {{scene.customClass}}
  {% else %}
    {{prefix}}{{scene.baseType}}
  {% endif %}
{% endfilter %}{% endmacro %}
enum {{sceneEnumName}} {
  {% for storyboard in storyboards %}
  {% set storyboardName %}{{storyboard.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}{% endset %}
  enum {{storyboardName}}: StoryboardType {
    static let storyboardName = "{{storyboard.name}}"
    {% if storyboard.initialScene %}

    {% set sceneClass %}{% call className storyboard.initialScene %}{% endset %}
    static let initialScene = InitialSceneType<{{sceneClass}}>(storyboard: {{storyboardName}}.self)
    {% endif %}
    {% for scene in storyboard.scenes where scene.identifier %}

    {% set sceneID %}{{scene.identifier|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}{% endset %}
    {% set sceneClass %}{% call className scene %}{% endset %}
    static let {{sceneID}} = SceneType<{{sceneClass}}>(storyboard: {{storyboardName}}.self, identifier: "{{scene.identifier}}")
    {% endfor %}
  }
  {% endfor %}
}

{% set segueEnumName %}{{param.segueEnumName|default:"StoryboardSegue"}}{% endset %}
{% for storyboard in storyboards %}
{% for scene in storyboard.scenes where scene.segues and not scene.baseType%}
{% set sceneClass %}{% call className scene %}{% endset %}
extension {{sceneClass}} {
  enum {{segueEnumName}}: String {
    {% for segue in scene.segues where segue.identifier %}
    {% set segueID %}{{segue.identifier|swiftIdentifier:"pretty"|lowerFirstWord}}{% endset %}
    case {{segueID|escapeReservedKeywords}}{% if segueID != segue.identifier %} = "{{segue.identifier}}"{% endif %}
    {% endfor %}
  }

  func perform(segue: {{segueEnumName}}, sender: Any? = nil) {
    performSegue(withIdentifier: segue.rawValue, sender: sender)
  }

  enum Typed{{segueEnumName}} {
    {% set hasUnnamedSegue %}{% for segue in scene.segues where not scene.identifier %}1{% endfor %}{% endset %}
    {% for segue in scene.segues where segue.identifier %}
    {% set segueID %}{{segue.identifier|swiftIdentifier:"pretty"|lowerFirstWord}}{% endset %}
    case {{segueID|escapeReservedKeywords}}{% if segue.destination %}(destination: {% call className segue.destination %}){% endif %}
    {% endfor %}
    {% if hasUnnamedSegue %}
    case unnamedSegue
    {% endif %}

    // swiftlint:disable cyclomatic_complexity
    init(segue: {{prefix}}StoryboardSegue) {
      switch segue.identifier ?? "" {
      {% for segue in scene.segues where segue.identifier %}
      case "{{segue.identifier}}":
        {% if segue.destination %}
        {% set destinationClass %}{% call className segue.destination %}{% endset %}
        {% if destinationClass != "UIViewController" %}
        guard let vc = segue.destination{% if isAppKit %}Controller{% endif %} as? {{destinationClass}} else {
          fatalError("Destination of segue '{{segue.identifier}}' is not of the expected type {{destinationClass}}.")
        }
        {% else %}
        let vc = segue.destination{% if isAppKit %}Controller{% endif %}
        {% endif %}
        {% endif %}
        {% set segueID %}{{segue.identifier|swiftIdentifier:"pretty"|lowerFirstWord}}{% endset %}
        self = .{{segueID|escapeReservedKeywords}}{% if segue.destination %}(destination: vc){%endif %}
      {% endfor %}
      {% if hasUnnamedSegue %}
      case "":
        self = .unnamedSegue
      {% endif %}
      default:
        fatalError("Unrecognized segue '\(segue.identifier ?? "")' in {{sceneClass}}")
      }
    }
    // swiftlint:enable cyclomatic_complexity
  }
}

{% endfor %}
{% endfor %}
enum {{segueEnumName}} {
  {% for storyboard in storyboards where storyboard.segues %}
  enum {{storyboard.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}: String, SegueType {
    {% for segue in storyboard.segues where segue.identifier %}
    {% set segueID %}{{segue.identifier|swiftIdentifier:"pretty"|lowerFirstWord}}{% endset %}
    case {{segueID|escapeReservedKeywords}}{% if segueID != segue.identifier %} = "{{segue.identifier}}"{% endif %}
    {% endfor %}
  }
  {% endfor %}
}
// swiftlint:enable explicit_type_interface identifier_name line_length type_body_length type_name

private final class BundleToken {}
{% elif storyboards %}
// Mixed AppKit and UIKit storyboard files found, please invoke swiftgen with these separately
{% else %}
// No storyboard found
{% endif %}
