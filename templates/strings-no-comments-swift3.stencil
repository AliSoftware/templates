// Generated using SwiftGen, by O.Halligon â€” https://github.com/SwiftGen/SwiftGen

{% if tables.first.levels %}
import Foundation

// swiftlint:disable file_length
// swiftlint:disable line_length
// swiftlint:disable type_body_length
// swiftlint:disable nesting
// swiftlint:disable identifier_name
// swiftlint:disable valid_docs
// swiftlint:disable type_name
{% macro recursiveBlock item %}
  {% for string in item.strings %}
  case {{string.key|swiftIdentifier|snakeToCamelCase|lowerFirstWord|escapeReservedKeywords}}{% if string.types %}({{string.types|join}}){% endif %}
  {% endfor %}
  {% for child in item.children %}
  {% call recursiveBlock child %}
  {% endfor %}
{% endmacro %}

{% set enumName %}{{param.enumName|default:"L10n"}}{% endset %}
enum {{enumName}} {
  {% call recursiveBlock tables.first.levels %}
}

{% macro parametersBlock types %}{% for type in types %}let p{{forloop.counter}}{% if not forloop.last %}, {% endif %}{% endfor %}{% endmacro %}
{% macro argumentsBlock types %}{% for type in types %}p{{forloop.counter}}{% if not forloop.last %}, {% endif %}{% endfor %}{% endmacro %}
{% macro recursiveBlock item %}
      {% for string in item.strings %}
      {% if string.types %}
      case .{{string.key|swiftIdentifier|snakeToCamelCase|lowerFirstWord|escapeReservedKeywords}}({% call parametersBlock string.types %}):
        return {{enumName}}.tr(key: "{{string.key}}", {% call argumentsBlock string.types %})
      {% else %}
      case .{{string.key|swiftIdentifier|snakeToCamelCase|lowerFirstWord|escapeReservedKeywords}}:
        return {{enumName}}.tr(key: "{{string.key}}")
      {% endif %}
      {% endfor %}
      {% for child in item.children %}
      {% call recursiveBlock child %}
      {% endfor %}
{% endmacro %}
extension {{enumName}}: CustomStringConvertible {
  var description: String { return self.string }

  var string: String {
    switch self {
      {% call recursiveBlock tables.first.levels %}
    }
  }

  private static func tr(key: String, _ args: CVarArg...) -> String {
    let format = NSLocalizedString(key, bundle: Bundle(for: BundleToken.self), comment: "")
    return String(format: format, locale: Locale.current, arguments: args)
  }
}

func tr(_ key: {{enumName}}) -> String {
  return key.string
}

private final class BundleToken {}
{% else %}
// No string found
{% endif %}
